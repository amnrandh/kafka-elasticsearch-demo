services:
  db:
    image: postgres:latest
    healthcheck:
      test: pg_isready -U user -d project_management
      interval: 5s
      timeout: 5s
      retries: 10
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical" 
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: project_management
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - kafka-elasticsearch-demo_kafka_network
  zookeeper:
    image: wurstmeister/zookeeper:latest
    healthcheck:
      test: echo ruok | nc localhost 2181 | grep imok
      interval: 5s
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_LISTENER_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - kafka-elasticsearch-demo_kafka_network
  kafka:
    image: wurstmeister/kafka:latest
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9093", "--list"]
      interval: 10s
      timeout: 5s
      retries: 20
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9094
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9094
      # map listeners to security protocols:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9093:9093"
      - "9094:9094"
    networks:
      - kafka-elasticsearch-demo_kafka_network
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9093
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    ports:
      - "8081:8081"
    networks:
      - kafka-elasticsearch-demo_kafka_network
    depends_on:
      - kafka
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"  
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - kafka-elasticsearch-demo_kafka_network
    deploy:
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      retries: 3
  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    depends_on:
      - kafka
      - schema-registry
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9093"
      KSQL_KSQL_SERVICE_ID: "ksql-service"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j.properties"
    ports:
      - "8088:8088"
    networks:
      - kafka-elasticsearch-demo_kafka_network
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - kafka-elasticsearch-demo_kafka_network
  connect:
    image: quay.io/debezium/connect:latest
    environment:
      - BOOTSTRAP_SERVERS=kafka:9093
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=docker-connect-configs
      - OFFSET_STORAGE_TOPIC=docker-connect-offsets
      - STATUS_STORAGE_TOPIC=docker-connect-status
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.storage.StringConverter
      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.storage.StringConverter
      - CONNECT_INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_REST_ADVERTISED_HOST_NAME=connect
      - CONNECT_REST_PORT=8083
    ports:
      - "8083:8083"
    networks:
      - kafka-elasticsearch-demo_kafka_network 
    volumes:
      - ./kafka-connect-plugins:/kafka/connect/plugins  # Mount a volume for connector persistence
      - ./kafka-connect-data:/var/lib/kafka-connect # Persist internal Kafka Connect data (connector configs, offsets, and status)
    depends_on:
      - kafka
      - db
networks:
  kafka-elasticsearch-demo_kafka_network:
    driver: bridge
volumes:
  postgres_data:  # Define the named volume at the root level